<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on limistah</title>
    <link>https://limistah.dev/posts/</link>
    <description>Recent content in Posts on limistah</description>
    <image>
      <title>limistah</title>
      <url>https://limistah.dev/images/papermod-cover.png</url>
      <link>https://limistah.dev/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 20 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://limistah.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Imparative and Declarative coding?</title>
      <link>https://limistah.dev/posts/imparative-declarative-coding/</link>
      <pubDate>Sat, 20 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/imparative-declarative-coding/</guid>
      <description>As a software engineer, I have written a lot of lines of code, and taking a hindsight back to the very first dayd of my career, I have written a log of bad code.
Recently, I published a new version of my react-here-maps library which saw a sprinkle of my improved experience</description>
    </item>
    <item>
      <title>Byte Masking the ins and out</title>
      <link>https://limistah.dev/posts/byte-masking/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/byte-masking/</guid>
      <description>Byte masking is a deep CS concept reserved for the nerds. Here we will attempt to dissect the topic and provide a relatable experience for everyone.
Welcome&amp;hellip;
Masking and its Relation to CS Masking is a process of concealing information. Take for example having a string &amp;quot;A&amp;quot; but revealing &amp;ldquo;X&amp;rdquo; to others such that only those with the information on how to get the hidden value can retrieve it.
A byte is a group of bits(1 and 0) usually eight in number.</description>
    </item>
    <item>
      <title>Ruby - if statement?</title>
      <link>https://limistah.dev/posts/ruby-if-conditions/</link>
      <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/ruby-if-conditions/</guid>
      <description>In Ruby, the if statement looks like this
val = 1 if val == 1 p &amp;#34;Equality Checked!&amp;#34; end And for if else
val = 2 if val == 1 p &amp;#34;Equality Checked!&amp;#34; else p &amp;#34;Equality Unchecked!&amp;#34; end And for if, else if, else
val = 2 if val == 1 p &amp;#34;Equality Checked!&amp;#34; elsif val == 2 p &amp;#34;Equality Middle Checked!&amp;#34; else p &amp;#34;Equality Unchecked!&amp;#34; end Also, remember that everything in ruby returns a value, so your if statement can return a value that could be stored in another variable.</description>
    </item>
    <item>
      <title>What is Byte Masking and how useful is it?</title>
      <link>https://limistah.dev/posts/byte-operators/</link>
      <pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/byte-operators/</guid>
      <description>Part of the operators we get introduced to when learning to program is Bitwise Operators, examples are:
The Bitwise OR | (a single pipe character) The Bitwise AND &amp;amp; (a single ampersand character) The Bitwise XOR ^ (a single caret character) Each of these has its usage, a refresher can be demonstrated considering these two variables foo=1 and bar=0
For the bitwise OR(|) operator const foo = 1, bar = 0 console.</description>
    </item>
    <item>
      <title>Creating multiple copies of objects in Ruby</title>
      <link>https://limistah.dev/posts/create-multiple-copies-of-an-object-ruby/</link>
      <pubDate>Thu, 07 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/create-multiple-copies-of-an-object-ruby/</guid>
      <description>Since everything is an object in Ruby having a functionality that can duplicate objects is not a bad idea.
Ruby ships with two methods for making copies of an object: the dup method and the clone method.
In Ruby, all variables hold a reference to an object. In a case where a section of a code modifies an object that is not meant to be modified, it is ideal to make a copy of that object to be used in that section of the code, protecting the integrity of the copied object.</description>
    </item>
    <item>
      <title>When to use puts, print, and p in Ruby</title>
      <link>https://limistah.dev/posts/when-to-use-puts-print-p-in-ruby/</link>
      <pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/when-to-use-puts-print-p-in-ruby/</guid>
      <description>Usually, programming languages have methods for printing out variables. Ruby is not an exception. We will explore the 3 popular methods for printing variables in the Ruby Programming language.
The print method The way print(var) works is basically converting its value to a string by calling the to_s method on the object(everything is an object in Ruby) before printing the value and returning nil to its caller.
num = 123 print(num) # -&amp;gt; 123 =&amp;gt; nil The print method can be easily used for concatenating strings</description>
    </item>
    <item>
      <title>tar (child) xz Cannot exec No such file or directory</title>
      <link>https://limistah.dev/posts/tar-child-xz-cannot-exec/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/tar-child-xz-cannot-exec/</guid>
      <description>The error:
tar (child): xz: Cannot exec: No such file or directory Is majorly an issue with the xz command not found on the host machine.
To verify, run:
whereis xz Fix To fix, use the installation command for your Linux distribution:
sudo apt-get install xz-utils # Debian / Ubuntu sudo yum install xz # RHEL / CentOS sudo zypper in xz # OpenSuSE sudo pacman -S xz # Arch Linux Then untar again with:</description>
    </item>
    <item>
      <title>Change files extension in a directory</title>
      <link>https://limistah.dev/posts/change-extension-of-files-in-a-directory/</link>
      <pubDate>Thu, 22 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/change-extension-of-files-in-a-directory/</guid>
      <description>Use Bash for loop, variable substitution, and mv to change the name of files in a directory modifying just the extension of the file</description>
    </item>
    <item>
      <title>Searching for a pattern in the man pages</title>
      <link>https://limistah.dev/posts/apropos-mandb-linux/</link>
      <pubDate>Tue, 20 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/apropos-mandb-linux/</guid>
      <description>To search through the man pages for some keywords, use the -k option.
man -k [keyword]
This shows a result of the commands, and routines that match the keyword with a one-line description of what they are about.
man -k passwd shows all the possible entries for passwd in the manual pages.
The apropos The man -k [keyword] command is similar to a help utility called apropos which is available both on Unix and Linux.</description>
    </item>
    <item>
      <title>Know the man(nual) pages</title>
      <link>https://limistah.dev/posts/understanding-man-pages/</link>
      <pubDate>Sun, 18 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/understanding-man-pages/</guid>
      <description>There are many ways to get help as a Linux administrator, manual pages are one of them as they are always close - accessible via the terminal.
The manual pages, called &amp;ldquo;man pages&amp;rdquo; is a local documentation and description of software packages, drivers, routines, and libraries on a Linux machine.
To use it run man [command|library|routine|driver] and replace the command with the name of a command to find a manual.</description>
    </item>
    <item>
      <title>Send message from a service worker</title>
      <link>https://limistah.dev/posts/send-message-from-service-worker-broadcastchannel/</link>
      <pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/send-message-from-service-worker-broadcastchannel/</guid>
      <description>Communication between service workers and the clients browser window can be achieved by simply doing:
self.clients.matchAll().then((clients) =&amp;gt; { clients.forEach((client) =&amp;gt; client.postMessage({ msg: &amp;#34;Hello from SW&amp;#34; })) }) The variable self is a reserved keyword in a service worker context. It references the global scope of the current worker execution scope and has some useful properties. It is like the window object of a JavaScript browser context.
In the above snippet, all the clients that run the service worker are loaded, then the .</description>
    </item>
    <item>
      <title>Autocompile Go</title>
      <link>https://limistah.dev/posts/autocompile-go/</link>
      <pubDate>Sat, 21 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/autocompile-go/</guid>
      <description>First, install CompileDaemon:
$ go get github.com/githubnemo/CompileDaemon &amp;amp;&amp;amp; go install github.com/githubnemo/CompileDaemon Then, from the root of the project, create a Make file:
$ touch Makefile And add the below content:
GOCMD ?= go GOBUILD = $(GOCMD) build GOCLEAN = $(GOCMD) clean GOTEST = $(GOCMD) test GOGET = $(GOCMD) get BINARY_NAME = project_name BINARY_UNIX = $(BINARY_NAME)_unix default: all all: test build build: $(GOBUILD) -o ../$(BINARY_NAME) -v -ldflags=&amp;#34;-X main.VERSION=$(TAG)&amp;#34; test: $(GOTEST) -v .</description>
    </item>
    <item>
      <title>Erlang Functions</title>
      <link>https://limistah.dev/posts/erlang-functions/</link>
      <pubDate>Mon, 21 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/erlang-functions/</guid>
      <description>When programming Erlang, you should think like you are writing an English essay. In Erlang, functions are not very different to what a traditional programming language offers, but they are written very differently in Erlang.
To declare a function in the Erlang Repl, you will have to use the fun keyword.
Name = fun(X) -&amp;gt; X. The above code will store the the declaration of a function called Name and would receive an argument called X.</description>
    </item>
    <item>
      <title>Erlang Pattern Matching</title>
      <link>https://limistah.dev/posts/erlang-pattern-matching/</link>
      <pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/erlang-pattern-matching/</guid>
      <description>If you come from a conventional programming language background, the way Erlang handles assignment is expected to look wonky, but it is not.
There is nothing like an assignment in Erlang programming language; there is a different approach to accessing values in memory, which is the pattern-matching operations.
With Java, PHP, Python, C, C++, and likes, the = symbol implies take the values from the right, and store it into the memory, then give me the reference of the location in memory and store it in the expression at the left.</description>
    </item>
    <item>
      <title>Erlang Variables</title>
      <link>https://limistah.dev/posts/erlang-variables/</link>
      <pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/erlang-variables/</guid>
      <description>If you have worked with other languages like JavaScript, Java, Python etc, you would be surprised by what Erlang understands as variable.
In Erlang, variables starts with uppercase letter, thus, C, X, Ape, Ant are all valid identifiers for Erlang variables.
Variables can not start with lowercase letter or begin with a number.
Erlang variables can include can alphanumeric characters, an underscore and @ symbol.
X = 1. %% Valid y = 2.</description>
    </item>
    <item>
      <title>CSS action pseudo classes</title>
      <link>https://limistah.dev/posts/css-action-pseudo-classes/</link>
      <pubDate>Sun, 13 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/css-action-pseudo-classes/</guid>
      <description>Without JavaScript, dynamic UI is possible with just CSS action class selectors.
Case study Help text for input element which is only visible when the input is focused.
The HTML &amp;lt;div class=&amp;#34;input-cont&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; placeholder=&amp;#34;Focus me&amp;#34; autofocus /&amp;gt; &amp;lt;span class=&amp;#34;help&amp;#34; data-help=&amp;#34;Enter your email&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; To achieve the above, a span holding the help text in a data-help attribute as a sibling to the actual input. Both the input and the span are children to a parent div with class name input-cont.</description>
    </item>
    <item>
      <title>An introduction to Erlang</title>
      <link>https://limistah.dev/posts/an-introduction-to-erlang/</link>
      <pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/an-introduction-to-erlang/</guid>
      <description>If you have used WhatsApp or Facebook Chat, then you have one way or the other interacted with an Erlang-backed system.
Erlang is a language created for the telecommunication industry by Jor Armstrong, Robert Virding, and Mike Williams in 1986. It was recorded that Jor Armstrong claimed he was provided a library and did not know what to do with it, then they taught him to solve the reliability and concurrent problem of the telecommunication industry, and that gave birth to Erlang.</description>
    </item>
    <item>
      <title>CSS counters</title>
      <link>https://limistah.dev/posts/css-counters/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/css-counters/</guid>
      <description>CSS can keep count of numbers without writing any additional JavaScript.
It does this by taking note the amount of time a CSS block affects a page then incrementing the counter for that block if the counter-increment rule is implemented.
For example:
input:invalid { counter-increment: invalid-count; } With no JavaScript at all, CSS understands that whenever there is an invalid element, it should increment the count for the invalid-count identifier.</description>
    </item>
    <item>
      <title>Structural CSS Selectors</title>
      <link>https://limistah.dev/posts/structural-css-selectors/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/structural-css-selectors/</guid>
      <description>Yeah, you read that right. Let go straight into it!
A Test Case Can you interprete this CSS selector query?
p.title:first-of-type { color: red; } Let me think like you would:
Select every P element that has the class name of title and apply the color red to the first of its type.
&amp;lt;body&amp;gt; &amp;lt;p&amp;gt;Lorem Ipsum&amp;lt;/p&amp;gt; &amp;lt;p class=&amp;#34;title&amp;#34;&amp;gt;Paragraph 2 (shows in red color)&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; You think you’re right.
Another test case What happens with the below:</description>
    </item>
    <item>
      <title>How to enable background Audio Play in iOS React Native</title>
      <link>https://limistah.dev/posts/enable-background-audio-react-native/</link>
      <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/enable-background-audio-react-native/</guid>
      <description>Open ios/{APP_NAME}/Info.plist.
Add
&amp;lt;plist&amp;gt; &amp;lt;dict&amp;gt; ... ... ... &amp;lt;key&amp;gt;UIBackgroundModes&amp;lt;/key&amp;gt; &amp;lt;array&amp;gt; &amp;lt;string&amp;gt;audio&amp;lt;/string&amp;gt; &amp;lt;/array&amp;gt; &amp;lt;/dict&amp;gt; &amp;lt;/plist&amp;gt; Press r on the metro terminal Voila!</description>
    </item>
    <item>
      <title>Configure Rollup to bundle Axios module</title>
      <link>https://limistah.dev/posts/configure-axios-rollup/</link>
      <pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/configure-axios-rollup/</guid>
      <description>Make axios work with rollup</description>
    </item>
    <item>
      <title>How to create Application Icon (Appstore | Playstore)</title>
      <link>https://limistah.dev/posts/make-app-icon/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/make-app-icon/</guid>
      <description>Easy way to make Android/iOS app icons</description>
    </item>
    <item>
      <title>Title of the post</title>
      <link>https://limistah.dev/posts/shiny-cutting-edge/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/shiny-cutting-edge/</guid>
      <description>Write Here</description>
    </item>
    <item>
      <title>Dockerized Node/Nginx, MongoDB, Redis app setup</title>
      <link>https://limistah.dev/posts/docker-node-nginx-redis-mongodb/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/docker-node-nginx-redis-mongodb/</guid>
      <description>Introduction Docker is an app development tool that eases the process of creating, running, and deploying applications. It uses the concept of containers which work just like a Virtual Machine does.
While Docker runs more like a Virtual Machine does, it is more advantageous than a VM.
It let us define OS-like images like we are writing an actual OS that includes the only tools that we need, aside this, Docker utilizes the concept of layers which makes its images very much extensible.</description>
    </item>
    <item>
      <title>SocketIO - App structure and architecture</title>
      <link>https://limistah.dev/posts/socketio-app-structure/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/socketio-app-structure/</guid>
      <description>Introduction SocketIO is a JavaScript library that makes developers&amp;rsquo; lives easier when dealing with web socket and socket programming. This is the fact that SocketIO has abstracted out all the low-level and tedious steps that are associated with setting up a socket server and client; it has made the question of programmers be &amp;ldquo;How can I structure my application.&amp;rdquo;
While I have done different types of socket implementations, I will walk us through a setup that has always work for me and has proven to be the best in cases that I have had to use SocketIO.</description>
    </item>
    <item>
      <title>Asynchronous Javascript</title>
      <link>https://limistah.dev/posts/asynchronous-javascript/</link>
      <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/asynchronous-javascript/</guid>
      <description>In computation systems, names like concurrent, sequential, parallel, serial, synchronous, asynchronous, non-blocking, shared state, message passing, and likes, stand as a forbearer for the actual task that happens in a system.
While all of the above techniques have their use cases, in the world of JavaScript, asynchronous and synchronous programming never leave the tongues of its programmers.
In his Concurrency glossary, slikts (dabas@untu.ms) wrote about asynchronous, he said:
Asynchrony means &amp;ldquo;not happening at the same time&amp;rdquo;, and asynchronous message passing is a communication model that does not require the sending and receiving to be synchronized, meaning that the sender isn&amp;rsquo;t blocked until the receiver is ready.</description>
    </item>
    <item>
      <title>Menu system in Node Apps like WordPress Menu</title>
      <link>https://limistah.dev/posts/wordpress-like-menu-node-apps/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/wordpress-like-menu-node-apps/</guid>
      <description>You might have been in this kind of trap before or currently in one, well, I just want to tell you that I know your pain.
In a custom built CMS, managing of Menu and navigation in the site from the Admin Dashboard is a requirement. While it is interesting to use, it is not as interesting to build.
I just walked past this process, here, I am sharing how I have conquered it.</description>
    </item>
    <item>
      <title>ReactJS - Unexpected closing tag</title>
      <link>https://limistah.dev/posts/react-unexpected-closing-tag/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/react-unexpected-closing-tag/</guid>
      <description>Beginners in ReactJS often face this kind of error: It is not just with inputs, it is with all HTML elements that does not expect a closing tags, they are called empty elements. A list of these tags could be found here.
To solve this very easily, we just have to follow the HTML semantics by ending all empty elements with /&amp;gt; instead of &amp;gt;
So inputs should look like this:</description>
    </item>
    <item>
      <title>ReactJS - Inplace Edit component</title>
      <link>https://limistah.dev/posts/reactjs-inplace-edit-component/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/reactjs-inplace-edit-component/</guid>
      <description>Last time, I was trying to render a data table and I thought that I should make some fields editable right in the table listing. It is interesting to note that I never thought about any NPM library for it, so I went all out to create a simple but effective solution for myself.
In this post, I will demonstrate how I created an editable component. The component would be able to use different form fields and notify the parent if any change has been made.</description>
    </item>
    <item>
      <title>AdonisJS - Event</title>
      <link>https://limistah.dev/posts/adonisjs-use-events/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/adonisjs-use-events/</guid>
      <description>Modern application development requires that some actions are carried out when a point of the application is reached.
Tasks like confirmation email, invoice generation, logging and profiling are few of things that requires to be carried out in specific regions of application flow.
These actions that are triggered are called Events. Events in modern application development make code execution after a web request to the server has been completed to be possible.</description>
    </item>
    <item>
      <title>AdonisJS - Route Model Binding</title>
      <link>https://limistah.dev/posts/adonisjs-route-model-binding/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/adonisjs-route-model-binding/</guid>
      <description>AdonisJS was built for the NodeJS Artisans taking after the concepts of Laravel - The PHP framework for Artisans. AdonisJS did a great job porting these concepts into JavaScript, it maintains the namespace even though JavaScript does not support that, it using its own fast, easy and extendable view engine and many more, but some features of Laravel are not shipped with AdonisJS by default.
The IoC container in Laravel auto injects classes by inspection when a recognized namespace is Type Hinted.</description>
    </item>
    <item>
      <title>AdonisJS - Using Validators with resource routes</title>
      <link>https://limistah.dev/posts/adonisjs-validators-with-resource-routes/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/adonisjs-validators-with-resource-routes/</guid>
      <description>First, install the Validator using the adonis command:
adonis install @adonisjs/validtor Create a resource route
adonis make:controller PostController --resource Define the route in start/route.js
//.. Route.resource(&amp;#34;posts&amp;#34;, &amp;#34;PostController&amp;#34;) //.. Now, we can make a Validator for /posts/store
adonis make:validator StorePost This will create a validator in /app/Validators.
Finally, To define a validator for a specific route in the definition, do something like this:
//.. Route.resource(&amp;#34;posts&amp;#34;, &amp;#34;PostController&amp;#34;).validator([[[&amp;#34;store&amp;#34;, &amp;#34;StoreUser&amp;#34;]]]) //.. PSSS: I want this as short as it can while still answering question regarding the final code.</description>
    </item>
    <item>
      <title>Migrating from WordPress to Gatsby - The Journey</title>
      <link>https://limistah.dev/posts/migrating-from-wordpress-to-gatsby/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/migrating-from-wordpress-to-gatsby/</guid>
      <description>Yes, this topic is worth a post and I will walk you through why the migration was inevitable, and how I had done it.
Formerly, this website used to run on WordPress, the great PHP CMS. The design was made with the aid of Typography theme, I loved it!
All of the post prior to this date was written using the WordPress admin dashboard. I loved the Gutenberg Editor, it was so fluid and easy to work with.</description>
    </item>
    <item>
      <title>Programmer&#39;s Sexiness Quest</title>
      <link>https://limistah.dev/posts/programmer-sexiness-quest/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/programmer-sexiness-quest/</guid>
      <description>Let&amp;rsquo;s be guided, we are not getting naughty here.
Nevertheless, a programmer is a human, he has his feelings and emotions which is interesting. The direction he puts these uniquely human traits makes him more interesting - towards the code and software, of course.
I&amp;rsquo;ve been through a variety of programming languages, which always turned to be that the deeper I dive into a language, the more &amp;ldquo;aha&amp;rdquo; moment I get.</description>
    </item>
    <item>
      <title>Complete NodeJS App Setup  on an AWS Lightsail VPS</title>
      <link>https://limistah.dev/posts/nodejs-lightsail-setup/</link>
      <pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/nodejs-lightsail-setup/</guid>
      <description>In this post, we will explore how to set up a NodeJS app on Amazon’s Lightsail instance. We will also explore setting up a CircleCI job for a NodeJS project, use Nginx as a web server, setup SSL for the server, and allow a local machine to access the remote server.
Prerequisites AWS Lightsail instance AWS Route53 domain (not mandatory) CircleCI account Github repo for the NodeJS project. Let’s begin!</description>
    </item>
    <item>
      <title>Clean Code – Rules For Name Crafting (Series)</title>
      <link>https://limistah.dev/posts/clean-code-series/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/clean-code-series/</guid>
      <description>The very first task that we do while starting to program is naming from the creation of directory to files, to classes, to functions. Name is everywhere, we cannot escape it, and we do so much of naming, we should be fulfilled if we can do it better.
Beginners do marvel at how the seniors snap out great names that fit the context to be applied. How the names are crafted seem like magic, they end up seeing themselves not so close when they see that wack name their brain could best provide.</description>
    </item>
    <item>
      <title>Clean Code – Brief Review</title>
      <link>https://limistah.dev/posts/clean-code-review/</link>
      <pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/clean-code-review/</guid>
      <description>Currently, I find my self reading Clean Code by Robert Cecil Martin, and just completed the first three chapters. I am taking my time to digest the genius work of Robert, and I see it as a need to share what could be understood in just the first 50 pages of the book.
To Robert, spending time to write the right code is an investment in the future maintenance time of that code.</description>
    </item>
    <item>
      <title>Running mongod service in the background – MAC OS</title>
      <link>https://limistah.dev/posts/mac-mongodb-in-background/</link>
      <pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/mac-mongodb-in-background/</guid>
      <description>MongoDB ships with an easy mongod CLI command to start its server. For Linux users, there is an added level of flexibility using the Systemd service to manage foreground and background processes. To start a MongoDB server on the boot of a Linux machine, it is as easy as registering a service with systemd using:
$ systemctl enable mongod.service Switching from a Linux machine to Mac, and after the successful installation of MongoDB, surely, there is a need to start the command in the background while the development process continues.</description>
    </item>
    <item>
      <title>Frameworks - Not always the solution</title>
      <link>https://limistah.dev/posts/frameworks-not-perfect-solution/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/frameworks-not-perfect-solution/</guid>
      <description>Beginners do believe there is a perfect structure for setting up a project, experienced programmers know this is so far from the truth. A perfect structure is only perfect for a specific project, while project requirement varies across specifications, a perfect project setup varies across projects.
Looking further down project specifications, there are repeating patterns and procedures that make all the projects look like they are all doing the same thing.</description>
    </item>
    <item>
      <title>Rules For Name Crafting – Part One</title>
      <link>https://limistah.dev/posts/clean-code-name-crafting-one/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/clean-code-name-crafting-one/</guid>
      <description>This is the first of the series – Clean Code – Rule For Name Crafting Series. In this post, we will be dealing with the first three rules stated by Robert in his Clean Code book and they are: always use intention revealing names, avoid disinformation, and make meaningful distinctions.
#1: Always Use Intention Revealing Names To some profession, giving names that do not reveal what the item/object is about might be a norm, we have seen astroids named Iris, and a human named Mars.</description>
    </item>
    <item>
      <title>Smart React Class function scope binding</title>
      <link>https://limistah.dev/posts/react-class-method-binding/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/react-class-method-binding/</guid>
      <description>Passing down functions as event handlers down to children components is a norm in the react world. It eases the communication flow, as the saying goes props down, functions up.
Things get a little bit tricky when using a React Classical component. Functions have to maintain their scope for proper interaction with their declared class properties. You might not be lucky sometimes, so there has been a couple of workaround for this.</description>
    </item>
  </channel>
</rss>
