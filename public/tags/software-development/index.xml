<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Development on limistah</title>
    <link>https://limistah.dev/tags/software-development/</link>
    <description>Recent content in Software Development on limistah</description>
    <image>
      <title>limistah</title>
      <url>https://limistah.dev/images/papermod-cover.png</url>
      <link>https://limistah.dev/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 07 Sep 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://limistah.dev/tags/software-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating multiple copies of objects in Ruby</title>
      <link>https://limistah.dev/posts/create-multiple-copies-of-an-object-ruby/</link>
      <pubDate>Thu, 07 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/create-multiple-copies-of-an-object-ruby/</guid>
      <description>Since everything is an object in Ruby having a functionality that can duplicate objects is not a bad idea.
Ruby ships with two methods for making copies of an object: the dup method and the clone method.
In Ruby, all variables hold a reference to an object. In a case where a section of a code modifies an object that is not meant to be modified, it is ideal to make a copy of that object to be used in that section of the code, protecting the integrity of the copied object.</description>
    </item>
    <item>
      <title>When to use puts, print, and p in Ruby</title>
      <link>https://limistah.dev/posts/when-to-use-puts-print-p-in-ruby/</link>
      <pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/when-to-use-puts-print-p-in-ruby/</guid>
      <description>Usually, programming languages have methods for printing out variables. Ruby is not an exception. We will explore the 3 popular methods for printing variables in the Ruby Programming language.
The print method The way print(var) works is basically converting its value to a string by calling the to_s method on the object(everything is an object in Ruby) before printing the value and returning nil to its caller.
num = 123 print(num) # -&amp;gt; 123 =&amp;gt; nil The print method can be easily used for concatenating strings</description>
    </item>
  </channel>
</rss>
