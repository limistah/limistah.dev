<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AdonisJS on limistah</title>
    <link>https://limistah.dev/tags/adonisjs/</link>
    <description>Recent content in AdonisJS on limistah</description>
    <image>
      <title>limistah</title>
      <url>https://limistah.dev/images/papermod-cover.png</url>
      <link>https://limistah.dev/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 19 Jan 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://limistah.dev/tags/adonisjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AdonisJS - Event</title>
      <link>https://limistah.dev/posts/adonisjs-use-events/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/adonisjs-use-events/</guid>
      <description>Modern application development requires that some actions are carried out when a point of the application is reached.
Tasks like confirmation email, invoice generation, logging and profiling are few of things that requires to be carried out in specific regions of application flow.
These actions that are triggered are called Events. Events in modern application development make code execution after a web request to the server has been completed to be possible.</description>
    </item>
    <item>
      <title>AdonisJS - Route Model Binding</title>
      <link>https://limistah.dev/posts/adonisjs-route-model-binding/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/adonisjs-route-model-binding/</guid>
      <description>AdonisJS was built for the NodeJS Artisans taking after the concepts of Laravel - The PHP framework for Artisans. AdonisJS did a great job porting these concepts into JavaScript, it maintains the namespace even though JavaScript does not support that, it using its own fast, easy and extendable view engine and many more, but some features of Laravel are not shipped with AdonisJS by default.
The IoC container in Laravel auto injects classes by inspection when a recognized namespace is Type Hinted.</description>
    </item>
    <item>
      <title>AdonisJS - Using Validators with resource routes</title>
      <link>https://limistah.dev/posts/adonisjs-validators-with-resource-routes/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/adonisjs-validators-with-resource-routes/</guid>
      <description>First, install the Validator using the adonis command:
adonis install @adonisjs/validtor Create a resource route
adonis make:controller PostController --resource Define the route in start/route.js
//.. Route.resource(&amp;#34;posts&amp;#34;, &amp;#34;PostController&amp;#34;) //.. Now, we can make a Validator for /posts/store
adonis make:validator StorePost This will create a validator in /app/Validators.
Finally, To define a validator for a specific route in the definition, do something like this:
//.. Route.resource(&amp;#34;posts&amp;#34;, &amp;#34;PostController&amp;#34;).validator([[[&amp;#34;store&amp;#34;, &amp;#34;StoreUser&amp;#34;]]]) //.. PSSS: I want this as short as it can while still answering question regarding the final code.</description>
    </item>
  </channel>
</rss>
