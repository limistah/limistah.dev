<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>css on limistah</title>
    <link>https://limistah.dev/tags/css/</link>
    <description>Recent content in css on limistah</description>
    <image>
      <title>limistah</title>
      <url>https://limistah.dev/images/papermod-cover.png</url>
      <link>https://limistah.dev/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 13 Jun 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://limistah.dev/tags/css/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CSS action pseudo classes</title>
      <link>https://limistah.dev/posts/css-action-pseudo-classes/</link>
      <pubDate>Sun, 13 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/css-action-pseudo-classes/</guid>
      <description>Without JavaScript, dynamic UI is possible with just CSS action class selectors.
Case study Help text for input element which is only visible when the input is focused.
The HTML &amp;lt;div class=&amp;#34;input-cont&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; placeholder=&amp;#34;Focus me&amp;#34; autofocus /&amp;gt; &amp;lt;span class=&amp;#34;help&amp;#34; data-help=&amp;#34;Enter your email&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; To achieve the above, a span holding the help text in a data-help attribute as a sibling to the actual input. Both the input and the span are children to a parent div with class name input-cont.</description>
    </item>
    <item>
      <title>CSS counters</title>
      <link>https://limistah.dev/posts/css-counters/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/css-counters/</guid>
      <description>CSS can keep count of numbers without writing any additional JavaScript.
It does this by taking note the amount of time a CSS block affects a page then incrementing the counter for that block if the counter-increment rule is implemented.
For example:
input:invalid { counter-increment: invalid-count; } With no JavaScript at all, CSS understands that whenever there is an invalid element, it should increment the count for the invalid-count identifier.</description>
    </item>
    <item>
      <title>Structural CSS Selectors</title>
      <link>https://limistah.dev/posts/structural-css-selectors/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/structural-css-selectors/</guid>
      <description>Yeah, you read that right. Let go straight into it!
A Test Case Can you interprete this CSS selector query?
p.title:first-of-type { color: red; } Let me think like you would:
Select every P element that has the class name of title and apply the color red to the first of its type.
&amp;lt;body&amp;gt; &amp;lt;p&amp;gt;Lorem Ipsum&amp;lt;/p&amp;gt; &amp;lt;p class=&amp;#34;title&amp;#34;&amp;gt;Paragraph 2 (shows in red color)&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; You think youâ€™re right.
Another test case What happens with the below:</description>
    </item>
  </channel>
</rss>
