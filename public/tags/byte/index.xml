<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>byte on limistah</title>
    <link>https://limistah.dev/tags/byte/</link>
    <description>Recent content in byte on limistah</description>
    <image>
      <title>limistah</title>
      <url>https://limistah.dev/images/papermod-cover.png</url>
      <link>https://limistah.dev/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 17 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://limistah.dev/tags/byte/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Byte Masking the ins and out</title>
      <link>https://limistah.dev/posts/byte-masking/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/byte-masking/</guid>
      <description>Byte masking is a deep CS concept reserved for the nerds. Here we will attempt to dissect the topic and provide a relatable experience for everyone.
Welcome&amp;hellip;
Masking and its Relation to CS Masking is a process of concealing information. Take for example having a string &amp;quot;A&amp;quot; but revealing &amp;ldquo;X&amp;rdquo; to others such that only those with the information on how to get the hidden value can retrieve it.
A byte is a group of bits(1 and 0) usually eight in number.</description>
    </item>
    <item>
      <title>What is Byte Masking and how useful is it?</title>
      <link>https://limistah.dev/posts/byte-operators/</link>
      <pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/byte-operators/</guid>
      <description>Part of the operators we get introduced to when learning to program is Bitwise Operators, examples are:
The Bitwise OR | (a single pipe character) The Bitwise AND &amp;amp; (a single ampersand character) The Bitwise XOR ^ (a single caret character) Each of these has its usage, a refresher can be demonstrated considering these two variables foo=1 and bar=0
For the bitwise OR(|) operator const foo = 1, bar = 0 console.</description>
    </item>
  </channel>
</rss>
