<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JS on limistah</title>
    <link>https://limistah.dev/tags/js/</link>
    <description>Recent content in JS on limistah</description>
    <image>
      <title>limistah</title>
      <url>https://limistah.dev/images/papermod-cover.png</url>
      <link>https://limistah.dev/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 19 Mar 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://limistah.dev/tags/js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dockerized Node/Nginx, MongoDB, Redis app setup</title>
      <link>https://limistah.dev/posts/docker-node-nginx-redis-mongodb/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/docker-node-nginx-redis-mongodb/</guid>
      <description>Introduction Docker is an app development tool that eases the process of creating, running, and deploying applications. It uses the concept of containers which work just like a Virtual Machine does.
While Docker runs more like a Virtual Machine does, it is more advantageous than a VM.
It let us define OS-like images like we are writing an actual OS that includes the only tools that we need, aside this, Docker utilizes the concept of layers which makes its images very much extensible.</description>
    </item>
    <item>
      <title>SocketIO - App structure and architecture</title>
      <link>https://limistah.dev/posts/socketio-app-structure/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/socketio-app-structure/</guid>
      <description>Introduction SocketIO is a JavaScript library that makes developers&amp;rsquo; lives easier when dealing with web socket and socket programming. This is the fact that SocketIO has abstracted out all the low-level and tedious steps that are associated with setting up a socket server and client; it has made the question of programmers be &amp;ldquo;How can I structure my application.&amp;rdquo;
While I have done different types of socket implementations, I will walk us through a setup that has always work for me and has proven to be the best in cases that I have had to use SocketIO.</description>
    </item>
    <item>
      <title>Asynchronous Javascript</title>
      <link>https://limistah.dev/posts/asynchronous-javascript/</link>
      <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://limistah.dev/posts/asynchronous-javascript/</guid>
      <description>In computation systems, names like concurrent, sequential, parallel, serial, synchronous, asynchronous, non-blocking, shared state, message passing, and likes, stand as a forbearer for the actual task that happens in a system.
While all of the above techniques have their use cases, in the world of JavaScript, asynchronous and synchronous programming never leave the tongues of its programmers.
In his Concurrency glossary, slikts (dabas@untu.ms) wrote about asynchronous, he said:
Asynchrony means &amp;ldquo;not happening at the same time&amp;rdquo;, and asynchronous message passing is a communication model that does not require the sending and receiving to be synchronized, meaning that the sender isn&amp;rsquo;t blocked until the receiver is ready.</description>
    </item>
  </channel>
</rss>
